<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="test_8c" kind="file" language="C++">
    <compoundname>test.c</compoundname>
    <includes local="no">linux/cgroup.h</includes>
    <includes local="no">linux/cred.h</includes>
    <incdepgraph>
      <node id="4">
        <label>test.c</label>
        <link refid="test.c"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>linux/cgroup.h</label>
      </node>
      <node id="6">
        <label>linux/cred.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="test_8c_1a3ebcb2f103577578af500979b2be8936" prot="public" static="no">
        <name>SUBSYS</name>
        <param><defname>_x</defname></param>
        <initializer>[_x ## _cgrp_id] = &amp;_x ## _cgrp_subsys,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="7" column="9" bodyfile="test.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="test_8c_1a3ebcb2f103577578af500979b2be8936" prot="public" static="no">
        <name>SUBSYS</name>
        <param><defname>_x</defname></param>
        <initializer>[_x ## _cgrp_id] = #_x,</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="8" column="9" bodyfile="test.c" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test_8c_1afd402381a4b5a3f75f64dd470824589b" prot="public" static="no" mutable="no">
        <type>struct workqueue_struct *</type>
        <definition>struct workqueue_struct* cgroup_destroy_wq</definition>
        <argsstring></argsstring>
        <name>cgroup_destroy_wq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="5" column="1" bodyfile="test.c" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test_8c_1ac162dbcdb09b463ef9c37a9f7fe7dfb0" prot="public" static="no" mutable="no">
        <type>struct workqueue_struct *</type>
        <definition>struct workqueue_struct* cgroup_pidlist_destroy_wq</definition>
        <argsstring></argsstring>
        <name>cgroup_pidlist_destroy_wq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="6" column="1" bodyfile="test.c" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" prot="public" static="no" mutable="no">
        <type>struct cgroup_root</type>
        <definition>struct cgroup_root cgrp_dfl_root</definition>
        <argsstring></argsstring>
        <name>cgrp_dfl_root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="6" column="1" bodyfile="test.c" bodystart="9" bodyend="-1"/>
        <referencedby refid="test_8c_1aecdc54fcc801da61b237c60f924a220e" compoundref="test_8c" startline="354" endline="376">cgroup_destroy_root</referencedby>
        <referencedby refid="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" compoundref="test_8c" startline="407" endline="472">cgroup_mount</referencedby>
        <referencedby refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" compoundref="test_8c" startline="576" endline="634">rebind_subsystems</referencedby>
        <referencedby refid="test_8c_1acd75edad54981c1b66e22efafcf6170d" compoundref="test_8c" startline="759" endline="802">cgroup_remount</referencedby>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
        <referencedby refid="test_8c_1a189c132d50f549d750e498083ddae57b" compoundref="test_8c" startline="880" endline="889">cgroup_kill_sb</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test_8c_1a7bf0f1964f432e905688b1bb4dc5fa0e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool cgrp_dfl_root_visible</definition>
        <argsstring></argsstring>
        <name>cgrp_dfl_root_visible</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="10" column="1" bodyfile="test.c" bodystart="10" bodyend="-1"/>
        <referencedby refid="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" compoundref="test_8c" startline="407" endline="472">cgroup_mount</referencedby>
        <referencedby refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" compoundref="test_8c" startline="576" endline="634">rebind_subsystems</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test_8c_1ace9442310e972def46dbeeabe426c08d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool cgroup_legacy_files_on_dfl</definition>
        <argsstring></argsstring>
        <name>cgroup_legacy_files_on_dfl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="11" column="1" bodyfile="test.c" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test_8c_1a71017b03a69b1901dfc31edec56d25cd" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int cgrp_dfl_root_inhibit_ss_mask</definition>
        <argsstring></argsstring>
        <name>cgrp_dfl_root_inhibit_ss_mask</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="12" column="1" bodyfile="test.c" bodystart="12" bodyend="-1"/>
        <referencedby refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" compoundref="test_8c" startline="576" endline="634">rebind_subsystems</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test_8c_1ab9d448c34108c83bb918e79c7ca81719" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cgroup_root_count</definition>
        <argsstring></argsstring>
        <name>cgroup_root_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="14" column="1" bodyfile="test.c" bodystart="14" bodyend="-1"/>
        <referencedby refid="test_8c_1a8607450f9a3dc545dc90c099155cac2e" compoundref="test_8c" startline="256" endline="306">find_css_set</referencedby>
        <referencedby refid="test_8c_1aecdc54fcc801da61b237c60f924a220e" compoundref="test_8c" startline="354" endline="376">cgroup_destroy_root</referencedby>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test_8c_1aece34b69a557dfc2c1e0e401f075278d" prot="public" static="no" mutable="no">
        <type>u64</type>
        <definition>u64 css_serial_nr_next</definition>
        <argsstring></argsstring>
        <name>css_serial_nr_next</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="16" column="1" bodyfile="test.c" bodystart="16" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test_8c_1aa064fb7cbb7a2d8ea47a031f240e60ca" prot="public" static="no" mutable="no">
        <type>int need_forkexit_callback</type>
        <definition>int need_forkexit_callback __read_mostly</definition>
        <argsstring></argsstring>
        <name>__read_mostly</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="17" column="1" bodyfile="test.c" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test_8c_1ad439c08d63718f18d5967b139d8706db" prot="public" static="no" mutable="no">
        <type>struct cftype</type>
        <definition>struct cftype cgroup_dfl_base_files[]</definition>
        <argsstring>[]</argsstring>
        <name>cgroup_dfl_base_files</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="17" column="1" bodyfile="test.c" bodystart="18" bodyend="-1"/>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
      </memberdef>
      <memberdef kind="variable" id="test_8c_1a9f2ecbcace8a5696b7b64f975df1d6eb" prot="public" static="no" mutable="no">
        <type>struct cftype</type>
        <definition>struct cftype cgroup_legacy_base_files[]</definition>
        <argsstring>[]</argsstring>
        <name>cgroup_legacy_base_files</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="17" column="1" bodyfile="test.c" bodystart="19" bodyend="-1"/>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test_8c_1a05c8c97a68ab506615dfb098bc89186a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DEFINE_SPINLOCK</definition>
        <argsstring>(cgroup_idr_lock)</argsstring>
        <name>DEFINE_SPINLOCK</name>
        <param>
          <type>cgroup_idr_lock</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="3" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a0f30a286272efe5d032c1f09754cfdde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DEFINE_SPINLOCK</definition>
        <argsstring>(release_agent_path_lock)</argsstring>
        <name>DEFINE_SPINLOCK</name>
        <param>
          <type>release_agent_path_lock</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="4" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a1c97100246d4db525e74b605e678d713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LIST_HEAD</definition>
        <argsstring>(cgroup_roots)</argsstring>
        <name>LIST_HEAD</name>
        <param>
          <type>cgroup_roots</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="13" column="1"/>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1acdd9356764535c60591cc3efaf65c62b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>DEFINE_IDR</definition>
        <argsstring>(cgroup_hierarchy_idr)</argsstring>
        <name>DEFINE_IDR</name>
        <param>
          <type>cgroup_hierarchy_idr</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="15" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rebind_subsystems</definition>
        <argsstring>(struct cgroup_root *dst_root, unsigned int ss_mask)</argsstring>
        <name>rebind_subsystems</name>
        <param>
          <type>struct cgroup_root *</type>
          <declname>dst_root</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>ss_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="20" column="1" bodyfile="test.c" bodystart="576" bodyend="634"/>
        <references refid="test_8c_1ae4afe366b1c79185687211d3a275c101" compoundref="test_8c" startline="53" endline="58">cgroup_css</references>
        <references refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" compoundref="test_8c" startline="9">cgrp_dfl_root</references>
        <references refid="test_8c_1a71017b03a69b1901dfc31edec56d25cd" compoundref="test_8c" startline="12">cgrp_dfl_root_inhibit_ss_mask</references>
        <references refid="test_8c_1a63940b2ed22e1d221779f807abec7a9b" compoundref="test_8c" startline="328" endline="346">cgroup_populate_dir</references>
        <references refid="test_8c_1a7bf0f1964f432e905688b1bb4dc5fa0e" compoundref="test_8c" startline="10">cgrp_dfl_root_visible</references>
        <references refid="test_8c_1a67846fcf77a9328302e2cf200db18098" compoundref="test_8c" startline="565" endline="575">cgroup_clear_dir</references>
        <references refid="test_8c_1a2fcd5031b202af403de1349ab7f6f19c" compoundref="test_8c" startline="517" endline="519">cgroup_refresh_child_subsys_mask</references>
        <referencedby refid="test_8c_1aecdc54fcc801da61b237c60f924a220e" compoundref="test_8c" startline="354" endline="376">cgroup_destroy_root</referencedby>
        <referencedby refid="test_8c_1acd75edad54981c1b66e22efafcf6170d" compoundref="test_8c" startline="759" endline="802">cgroup_remount</referencedby>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1aa5e610ba5b42c1c63cc3154ada71cfe9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cgroup_destroy_locked</definition>
        <argsstring>(struct cgroup *cgrp)</argsstring>
        <name>cgroup_destroy_locked</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="21" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a00cc07111db2df581c5a1f815db3e50c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int create_css</definition>
        <argsstring>(struct cgroup *cgrp, struct cgroup_subsys *ss, bool visible)</argsstring>
        <name>create_css</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>struct cgroup_subsys *</type>
          <declname>ss</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>visible</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="22" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a6b9234da085371688d97fc14002612d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void css_release</definition>
        <argsstring>(struct percpu_ref *ref)</argsstring>
        <name>css_release</name>
        <param>
          <type>struct percpu_ref *</type>
          <declname>ref</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="23" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1afefe22bdc638323a772b1e9b0d73701f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void kill_css</definition>
        <argsstring>(struct cgroup_subsys_state *css)</argsstring>
        <name>kill_css</name>
        <param>
          <type>struct cgroup_subsys_state *</type>
          <declname>css</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="24" column="1"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a868bd4e83d301006c5beacbd572ba8e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cgroup_addrm_files</definition>
        <argsstring>(struct cgroup *cgrp, struct cftype cfts[], bool is_add)</argsstring>
        <name>cgroup_addrm_files</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>struct cftype</type>
          <declname>cfts</declname>
          <array>[]</array>
        </param>
        <param>
          <type>bool</type>
          <declname>is_add</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="25" column="1"/>
        <referencedby refid="test_8c_1a63940b2ed22e1d221779f807abec7a9b" compoundref="test_8c" startline="328" endline="346">cgroup_populate_dir</referencedby>
        <referencedby refid="test_8c_1a67846fcf77a9328302e2cf200db18098" compoundref="test_8c" startline="565" endline="575">cgroup_clear_dir</referencedby>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a3bdf15853437c53e3b50717357229306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cgroup_idr_alloc</definition>
        <argsstring>(struct idr *idr, void *ptr, int start, int end, gfp_t gfp_mask)</argsstring>
        <name>cgroup_idr_alloc</name>
        <param>
          <type>struct idr *</type>
          <declname>idr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>start</declname>
        </param>
        <param>
          <type>int</type>
          <declname>end</declname>
        </param>
        <param>
          <type>gfp_t</type>
          <declname>gfp_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="26" column="1" bodyfile="test.c" bodystart="26" bodyend="34"/>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1afcee9a096b385689c54b60a6067e0b69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* cgroup_idr_replace</definition>
        <argsstring>(struct idr *idr, void *ptr, int id)</argsstring>
        <name>cgroup_idr_replace</name>
        <param>
          <type>struct idr *</type>
          <declname>idr</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="35" column="1" bodyfile="test.c" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a318bf86f2978e58eff3df756abac3d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_idr_remove</definition>
        <argsstring>(struct idr *idr, int id)</argsstring>
        <name>cgroup_idr_remove</name>
        <param>
          <type>struct idr *</type>
          <declname>idr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="42" column="1" bodyfile="test.c" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct cgroup *</type>
        <definition>struct cgroup* cgroup_parent</definition>
        <argsstring>(struct cgroup *cgrp)</argsstring>
        <name>cgroup_parent</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="47" column="1" bodyfile="test.c" bodystart="47" bodyend="52"/>
        <referencedby refid="test_8c_1a28887f0a6c976aada94da8d07c849edd" compoundref="test_8c" startline="59" endline="69">cgroup_e_css</referencedby>
        <referencedby refid="test_8c_1ae36262e91cd1d6996639e183150a8260" compoundref="test_8c" startline="70" endline="84">cgroup_get_e_css</referencedby>
        <referencedby refid="test_8c_1a2533ef0c2bbc63c62c277230124144d2" compoundref="test_8c" startline="96" endline="103">cgroup_is_descendant</referencedby>
        <referencedby refid="test_8c_1a4dec1acf21a1593560da2e68128fdddd" compoundref="test_8c" startline="107" endline="121">cgroup_update_populated</referencedby>
        <referencedby refid="test_8c_1a1e3bdc4c41ec2e3349b97a1546d759bd" compoundref="test_8c" startline="493" endline="516">cgroup_calc_child_subsys_mask</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1ae4afe366b1c79185687211d3a275c101" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct cgroup_subsys_state *</type>
        <definition>struct cgroup_subsys_state* cgroup_css</definition>
        <argsstring>(struct cgroup *cgrp, struct cgroup_subsys *ss)</argsstring>
        <name>cgroup_css</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>struct cgroup_subsys *</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="53" column="1" bodyfile="test.c" bodystart="53" bodyend="58"/>
        <referencedby refid="test_8c_1a28887f0a6c976aada94da8d07c849edd" compoundref="test_8c" startline="59" endline="69">cgroup_e_css</referencedby>
        <referencedby refid="test_8c_1ae36262e91cd1d6996639e183150a8260" compoundref="test_8c" startline="70" endline="84">cgroup_get_e_css</referencedby>
        <referencedby refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" compoundref="test_8c" startline="576" endline="634">rebind_subsystems</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a28887f0a6c976aada94da8d07c849edd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct cgroup_subsys_state *</type>
        <definition>struct cgroup_subsys_state* cgroup_e_css</definition>
        <argsstring>(struct cgroup *cgrp, struct cgroup_subsys *ss)</argsstring>
        <name>cgroup_e_css</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>struct cgroup_subsys *</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="59" column="1" bodyfile="test.c" bodystart="59" bodyend="69"/>
        <references refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" compoundref="test_8c" startline="47" endline="52">cgroup_parent</references>
        <references refid="test_8c_1ae4afe366b1c79185687211d3a275c101" compoundref="test_8c" startline="53" endline="58">cgroup_css</references>
        <referencedby refid="test_8c_1ac22cad6e76f7885f80c99a25538a2950" compoundref="test_8c" startline="198" endline="219">find_existing_css_set</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1ae36262e91cd1d6996639e183150a8260" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct cgroup_subsys_state *</type>
        <definition>struct cgroup_subsys_state* cgroup_get_e_css</definition>
        <argsstring>(struct cgroup *cgrp, struct cgroup_subsys *ss)</argsstring>
        <name>cgroup_get_e_css</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>struct cgroup_subsys *</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="70" column="1" bodyfile="test.c" bodystart="70" bodyend="84"/>
        <references refid="test_8c_1ae4afe366b1c79185687211d3a275c101" compoundref="test_8c" startline="53" endline="58">cgroup_css</references>
        <references refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" compoundref="test_8c" startline="47" endline="52">cgroup_parent</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a7a415d00b56519c56fdac985d8bf4d42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool cgroup_is_dead</definition>
        <argsstring>(const struct cgroup *cgrp)</argsstring>
        <name>cgroup_is_dead</name>
        <param>
          <type>const struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="85" column="1" bodyfile="test.c" bodystart="85" bodyend="87"/>
        <referencedby refid="test_8c_1abf926db5eff22e3650e1787776a9a5bd" compoundref="test_8c" startline="483" endline="486">cgroup_get</referencedby>
        <referencedby refid="test_8c_1a110c830b6cc063865e7261d7af97a9d7" compoundref="test_8c" startline="530" endline="544">cgroup_kn_lock_live</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1af931fcbb486993665177942a7aebc6a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct cgroup_subsys_state *</type>
        <definition>struct cgroup_subsys_state* of_css</definition>
        <argsstring>(struct kernfs_open_file *of)</argsstring>
        <name>of_css</name>
        <param>
          <type>struct kernfs_open_file *</type>
          <declname>of</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="88" column="1" bodyfile="test.c" bodystart="88" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a2533ef0c2bbc63c62c277230124144d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cgroup_is_descendant</definition>
        <argsstring>(struct cgroup *cgrp, struct cgroup *ancestor)</argsstring>
        <name>cgroup_is_descendant</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>struct cgroup *</type>
          <declname>ancestor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="96" column="1" bodyfile="test.c" bodystart="96" bodyend="103"/>
        <references refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" compoundref="test_8c" startline="47" endline="52">cgroup_parent</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1ac8ef1bd11f262f341e3eb89a1b98b74a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int notify_on_release</definition>
        <argsstring>(const struct cgroup *cgrp)</argsstring>
        <name>notify_on_release</name>
        <param>
          <type>const struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="104" column="1" bodyfile="test.c" bodystart="104" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a4dec1acf21a1593560da2e68128fdddd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_update_populated</definition>
        <argsstring>(struct cgroup *cgrp, bool populated)</argsstring>
        <name>cgroup_update_populated</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>populated</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="107" column="1" bodyfile="test.c" bodystart="107" bodyend="121"/>
        <references refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" compoundref="test_8c" startline="47" endline="52">cgroup_parent</references>
        <referencedby refid="test_8c_1a6103b359164aab19494cacec60e73e6e" compoundref="test_8c" startline="131" endline="153">put_css_set_locked</referencedby>
        <referencedby refid="test_8c_1a0a202cfc7bd89985c0c032d80f09b6ab" compoundref="test_8c" startline="241" endline="255">link_css_set</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1afe3d4d1cdbd1239c18727179de2569a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long css_set_hash</definition>
        <argsstring>(struct cgroup_subsys_state *css[])</argsstring>
        <name>css_set_hash</name>
        <param>
          <type>struct cgroup_subsys_state *</type>
          <declname>css</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="122" column="1" bodyfile="test.c" bodystart="122" bodyend="130"/>
        <referencedby refid="test_8c_1ac22cad6e76f7885f80c99a25538a2950" compoundref="test_8c" startline="198" endline="219">find_existing_css_set</referencedby>
        <referencedby refid="test_8c_1a8607450f9a3dc545dc90c099155cac2e" compoundref="test_8c" startline="256" endline="306">find_css_set</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a6103b359164aab19494cacec60e73e6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void put_css_set_locked</definition>
        <argsstring>(struct css_set *cset)</argsstring>
        <name>put_css_set_locked</name>
        <param>
          <type>struct css_set *</type>
          <declname>cset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="131" column="1" bodyfile="test.c" bodystart="131" bodyend="153"/>
        <references refid="test_8c_1a4dec1acf21a1593560da2e68128fdddd" compoundref="test_8c" startline="107" endline="121">cgroup_update_populated</references>
        <referencedby refid="test_8c_1af6a2c498a5f9f5dccaf306d649ac1926" compoundref="test_8c" startline="154" endline="160">put_css_set</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1af6a2c498a5f9f5dccaf306d649ac1926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void put_css_set</definition>
        <argsstring>(struct css_set *cset)</argsstring>
        <name>put_css_set</name>
        <param>
          <type>struct css_set *</type>
          <declname>cset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="154" column="1" bodyfile="test.c" bodystart="154" bodyend="160"/>
        <references refid="test_8c_1a6103b359164aab19494cacec60e73e6e" compoundref="test_8c" startline="131" endline="153">put_css_set_locked</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a77142dfd8a9e4fb0822adc4bf1327ec6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void get_css_set</definition>
        <argsstring>(struct css_set *cset)</argsstring>
        <name>get_css_set</name>
        <param>
          <type>struct css_set *</type>
          <declname>cset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="161" column="1" bodyfile="test.c" bodystart="161" bodyend="163"/>
        <referencedby refid="test_8c_1a8607450f9a3dc545dc90c099155cac2e" compoundref="test_8c" startline="256" endline="306">find_css_set</referencedby>
        <referencedby refid="test_8c_1af61530e0f44bf8f7ff0127f07634b2dc" compoundref="test_8c" startline="803" endline="825">cgroup_enable_task_cg_lists</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a53e55b164eab887e2ca8cddde65a5d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool compare_css_sets</definition>
        <argsstring>(struct css_set *cset, struct css_set *old_cset, struct cgroup *new_cgrp, struct cgroup_subsys_state *template[])</argsstring>
        <name>compare_css_sets</name>
        <param>
          <type>struct css_set *</type>
          <declname>cset</declname>
        </param>
        <param>
          <type>struct css_set *</type>
          <declname>old_cset</declname>
        </param>
        <param>
          <type>struct cgroup *</type>
          <declname>new_cgrp</declname>
        </param>
        <param>
          <type>struct cgroup_subsys_state *</type>
          <declname>template</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="164" column="1" bodyfile="test.c" bodystart="164" bodyend="197"/>
        <referencedby refid="test_8c_1ac22cad6e76f7885f80c99a25538a2950" compoundref="test_8c" startline="198" endline="219">find_existing_css_set</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1ac22cad6e76f7885f80c99a25538a2950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct css_set *</type>
        <definition>struct css_set* find_existing_css_set</definition>
        <argsstring>(struct css_set *old_cset, struct cgroup *cgrp, struct cgroup_subsys_state *template[])</argsstring>
        <name>find_existing_css_set</name>
        <param>
          <type>struct css_set *</type>
          <declname>old_cset</declname>
        </param>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>struct cgroup_subsys_state *</type>
          <declname>template</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="198" column="1" bodyfile="test.c" bodystart="198" bodyend="219"/>
        <references refid="test_8c_1a28887f0a6c976aada94da8d07c849edd" compoundref="test_8c" startline="59" endline="69">cgroup_e_css</references>
        <references refid="test_8c_1afe3d4d1cdbd1239c18727179de2569a1" compoundref="test_8c" startline="122" endline="130">css_set_hash</references>
        <references refid="test_8c_1a53e55b164eab887e2ca8cddde65a5d01" compoundref="test_8c" startline="164" endline="197">compare_css_sets</references>
        <referencedby refid="test_8c_1a8607450f9a3dc545dc90c099155cac2e" compoundref="test_8c" startline="256" endline="306">find_css_set</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1af24b26442927c685a414fe0504583ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_cgrp_cset_links</definition>
        <argsstring>(struct list_head *links_to_free)</argsstring>
        <name>free_cgrp_cset_links</name>
        <param>
          <type>struct list_head *</type>
          <declname>links_to_free</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="220" column="1" bodyfile="test.c" bodystart="220" bodyend="226"/>
        <referencedby refid="test_8c_1a1bb2b2486671a5058ede4348301aa354" compoundref="test_8c" startline="227" endline="240">allocate_cgrp_cset_links</referencedby>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a1bb2b2486671a5058ede4348301aa354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int allocate_cgrp_cset_links</definition>
        <argsstring>(int count, struct list_head *tmp_links)</argsstring>
        <name>allocate_cgrp_cset_links</name>
        <param>
          <type>int</type>
          <declname>count</declname>
        </param>
        <param>
          <type>struct list_head *</type>
          <declname>tmp_links</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="227" column="1" bodyfile="test.c" bodystart="227" bodyend="240"/>
        <references refid="test_8c_1af24b26442927c685a414fe0504583ec9" compoundref="test_8c" startline="220" endline="226">free_cgrp_cset_links</references>
        <referencedby refid="test_8c_1a8607450f9a3dc545dc90c099155cac2e" compoundref="test_8c" startline="256" endline="306">find_css_set</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a0a202cfc7bd89985c0c032d80f09b6ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void link_css_set</definition>
        <argsstring>(struct list_head *tmp_links, struct css_set *cset, struct cgroup *cgrp)</argsstring>
        <name>link_css_set</name>
        <param>
          <type>struct list_head *</type>
          <declname>tmp_links</declname>
        </param>
        <param>
          <type>struct css_set *</type>
          <declname>cset</declname>
        </param>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="241" column="1" bodyfile="test.c" bodystart="241" bodyend="255"/>
        <references refid="test_8c_1a4dec1acf21a1593560da2e68128fdddd" compoundref="test_8c" startline="107" endline="121">cgroup_update_populated</references>
        <referencedby refid="test_8c_1a8607450f9a3dc545dc90c099155cac2e" compoundref="test_8c" startline="256" endline="306">find_css_set</referencedby>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a8607450f9a3dc545dc90c099155cac2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct css_set *</type>
        <definition>struct css_set* find_css_set</definition>
        <argsstring>(struct css_set *old_cset, struct cgroup *cgrp)</argsstring>
        <name>find_css_set</name>
        <param>
          <type>struct css_set *</type>
          <declname>old_cset</declname>
        </param>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="256" column="1" bodyfile="test.c" bodystart="256" bodyend="306"/>
        <references refid="test_8c_1ac22cad6e76f7885f80c99a25538a2950" compoundref="test_8c" startline="198" endline="219">find_existing_css_set</references>
        <references refid="test_8c_1a77142dfd8a9e4fb0822adc4bf1327ec6" compoundref="test_8c" startline="161" endline="163">get_css_set</references>
        <references refid="test_8c_1a1bb2b2486671a5058ede4348301aa354" compoundref="test_8c" startline="227" endline="240">allocate_cgrp_cset_links</references>
        <references refid="test_8c_1ab9d448c34108c83bb918e79c7ca81719" compoundref="test_8c" startline="14">cgroup_root_count</references>
        <references refid="test_8c_1a0a202cfc7bd89985c0c032d80f09b6ab" compoundref="test_8c" startline="241" endline="255">link_css_set</references>
        <references refid="test_8c_1afe3d4d1cdbd1239c18727179de2569a1" compoundref="test_8c" startline="122" endline="130">css_set_hash</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a7175acc19fa151655b9813104cf212ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct cgroup_root *</type>
        <definition>struct cgroup_root* cgroup_root_from_kf</definition>
        <argsstring>(struct kernfs_root *kf_root)</argsstring>
        <name>cgroup_root_from_kf</name>
        <param>
          <type>struct kernfs_root *</type>
          <declname>kf_root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="308" column="1" bodyfile="test.c" bodystart="308" bodyend="311"/>
        <referencedby refid="test_8c_1ac5a237871349224e82728f07c4972104" compoundref="test_8c" startline="635" endline="655">cgroup_show_options</referencedby>
        <referencedby refid="test_8c_1acd75edad54981c1b66e22efafcf6170d" compoundref="test_8c" startline="759" endline="802">cgroup_remount</referencedby>
        <referencedby refid="test_8c_1a189c132d50f549d750e498083ddae57b" compoundref="test_8c" startline="880" endline="889">cgroup_kill_sb</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a6767892481facd6056885b7b981d5eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cgroup_init_root_id</definition>
        <argsstring>(struct cgroup_root *root)</argsstring>
        <name>cgroup_init_root_id</name>
        <param>
          <type>struct cgroup_root *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="312" column="1" bodyfile="test.c" bodystart="312" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a27e5a3a27562d7883f0f0a77300b3c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_exit_root_id</definition>
        <argsstring>(struct cgroup_root *root)</argsstring>
        <name>cgroup_exit_root_id</name>
        <param>
          <type>struct cgroup_root *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="321" column="1" bodyfile="test.c" bodystart="321" bodyend="327"/>
        <referencedby refid="test_8c_1aecdc54fcc801da61b237c60f924a220e" compoundref="test_8c" startline="354" endline="376">cgroup_destroy_root</referencedby>
        <referencedby refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a63940b2ed22e1d221779f807abec7a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cgroup_populate_dir</definition>
        <argsstring>(struct cgroup *cgrp, unsigned int subsys_mask)</argsstring>
        <name>cgroup_populate_dir</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>subsys_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="328" column="1" bodyfile="test.c" bodystart="328" bodyend="346"/>
        <references refid="test_8c_1a868bd4e83d301006c5beacbd572ba8e3">cgroup_addrm_files</references>
        <references refid="test_8c_1a67846fcf77a9328302e2cf200db18098" compoundref="test_8c" startline="565" endline="575">cgroup_clear_dir</references>
        <referencedby refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" compoundref="test_8c" startline="576" endline="634">rebind_subsystems</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a1a45d93c13f00906ae1e434da87c442e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_free_root</definition>
        <argsstring>(struct cgroup_root *root)</argsstring>
        <name>cgroup_free_root</name>
        <param>
          <type>struct cgroup_root *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="347" column="1" bodyfile="test.c" bodystart="347" bodyend="353"/>
        <referencedby refid="test_8c_1aecdc54fcc801da61b237c60f924a220e" compoundref="test_8c" startline="354" endline="376">cgroup_destroy_root</referencedby>
        <referencedby refid="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" compoundref="test_8c" startline="407" endline="472">cgroup_mount</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1aecdc54fcc801da61b237c60f924a220e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_destroy_root</definition>
        <argsstring>(struct cgroup_root *root)</argsstring>
        <name>cgroup_destroy_root</name>
        <param>
          <type>struct cgroup_root *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="354" column="1" bodyfile="test.c" bodystart="354" bodyend="376"/>
        <references refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" compoundref="test_8c" startline="576" endline="634">rebind_subsystems</references>
        <references refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" compoundref="test_8c" startline="9">cgrp_dfl_root</references>
        <references refid="test_8c_1ab9d448c34108c83bb918e79c7ca81719" compoundref="test_8c" startline="14">cgroup_root_count</references>
        <references refid="test_8c_1a27e5a3a27562d7883f0f0a77300b3c34" compoundref="test_8c" startline="321" endline="327">cgroup_exit_root_id</references>
        <references refid="test_8c_1a1a45d93c13f00906ae1e434da87c442e" compoundref="test_8c" startline="347" endline="353">cgroup_free_root</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a880be09f59530c2b96e2607fb9850800" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct cgroup *</type>
        <definition>struct cgroup* cset_cgroup_from_root</definition>
        <argsstring>(struct css_set *cset, struct cgroup_root *root)</argsstring>
        <name>cset_cgroup_from_root</name>
        <param>
          <type>struct css_set *</type>
          <declname>cset</declname>
        </param>
        <param>
          <type>struct cgroup_root *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="377" column="1" bodyfile="test.c" bodystart="377" bodyend="396"/>
        <referencedby refid="test_8c_1a4005c37a806eb63637bb54ed67972308" compoundref="test_8c" startline="397" endline="399">task_cgroup_from_root</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a4005c37a806eb63637bb54ed67972308" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct cgroup *</type>
        <definition>struct cgroup* task_cgroup_from_root</definition>
        <argsstring>(struct task_struct *task, struct cgroup_root *root)</argsstring>
        <name>task_cgroup_from_root</name>
        <param>
          <type>struct task_struct *</type>
          <declname>task</declname>
        </param>
        <param>
          <type>struct cgroup_root *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="397" column="1" bodyfile="test.c" bodystart="397" bodyend="399"/>
        <references refid="test_8c_1a880be09f59530c2b96e2607fb9850800" compoundref="test_8c" startline="377" endline="396">cset_cgroup_from_root</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1af194d4ac2c0e35ac177b576282f653aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* cgroup_file_name</definition>
        <argsstring>(struct cgroup *cgrp, const struct cftype *cft, char *buf)</argsstring>
        <name>cgroup_file_name</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>const struct cftype *</type>
          <declname>cft</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="400" column="1" bodyfile="test.c" bodystart="400" bodyend="406"/>
        <referencedby refid="test_8c_1a370ca239a4c3e93f577d808b8ba63235" compoundref="test_8c" startline="560" endline="564">cgroup_rm_file</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct dentry *</type>
        <definition>struct dentry* cgroup_mount</definition>
        <argsstring>(struct file_system_type *fs_type, int flags, const char *unused_dev_name, void *data)</argsstring>
        <name>cgroup_mount</name>
        <param>
          <type>struct file_system_type *</type>
          <declname>fs_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>unused_dev_name</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="407" column="1" bodyfile="test.c" bodystart="407" bodyend="472"/>
        <references refid="test_8c_1a4ee64583bbd338753f70fe739f3e601d" compoundref="test_8c" startline="656" endline="758">parse_cgroupfs_options</references>
        <references refid="test_8c_1a7bf0f1964f432e905688b1bb4dc5fa0e" compoundref="test_8c" startline="10">cgrp_dfl_root_visible</references>
        <references refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" compoundref="test_8c" startline="9">cgrp_dfl_root</references>
        <references refid="test_8c_1abf926db5eff22e3650e1787776a9a5bd" compoundref="test_8c" startline="483" endline="486">cgroup_get</references>
        <references refid="test_8c_1a8586f17f40dfddd4aac8cd3cc6ee7ca8" compoundref="test_8c" startline="490" endline="492">cgroup_put</references>
        <references refid="test_8c_1a5e93b850f31f0d655fb81ca74d0250e6" compoundref="test_8c" startline="545" endline="559">init_cgroup_root</references>
        <references refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" compoundref="test_8c" startline="839" endline="879">cgroup_setup_root</references>
        <references refid="test_8c_1a1a45d93c13f00906ae1e434da87c442e" compoundref="test_8c" startline="347" endline="353">cgroup_free_root</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1afd8b042dd211e4b22286235dc46a717e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>umode_t</type>
        <definition>umode_t cgroup_file_mode</definition>
        <argsstring>(const struct cftype *cft)</argsstring>
        <name>cgroup_file_mode</name>
        <param>
          <type>const struct cftype *</type>
          <declname>cft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="473" column="1" bodyfile="test.c" bodystart="473" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="test_8c_1abf926db5eff22e3650e1787776a9a5bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_get</definition>
        <argsstring>(struct cgroup *cgrp)</argsstring>
        <name>cgroup_get</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="483" column="1" bodyfile="test.c" bodystart="483" bodyend="486"/>
        <references refid="test_8c_1a7a415d00b56519c56fdac985d8bf4d42" compoundref="test_8c" startline="85" endline="87">cgroup_is_dead</references>
        <referencedby refid="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" compoundref="test_8c" startline="407" endline="472">cgroup_mount</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1af15f9d13bfd17b74f0144e392616937c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool cgroup_tryget</definition>
        <argsstring>(struct cgroup *cgrp)</argsstring>
        <name>cgroup_tryget</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="487" column="1" bodyfile="test.c" bodystart="487" bodyend="489"/>
        <referencedby refid="test_8c_1a110c830b6cc063865e7261d7af97a9d7" compoundref="test_8c" startline="530" endline="544">cgroup_kn_lock_live</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a8586f17f40dfddd4aac8cd3cc6ee7ca8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_put</definition>
        <argsstring>(struct cgroup *cgrp)</argsstring>
        <name>cgroup_put</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="490" column="1" bodyfile="test.c" bodystart="490" bodyend="492"/>
        <referencedby refid="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" compoundref="test_8c" startline="407" endline="472">cgroup_mount</referencedby>
        <referencedby refid="test_8c_1a5808e21adbb735b336c1ac679347c4f4" compoundref="test_8c" startline="520" endline="529">cgroup_kn_unlock</referencedby>
        <referencedby refid="test_8c_1a189c132d50f549d750e498083ddae57b" compoundref="test_8c" startline="880" endline="889">cgroup_kill_sb</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a1e3bdc4c41ec2e3349b97a1546d759bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int cgroup_calc_child_subsys_mask</definition>
        <argsstring>(struct cgroup *cgrp, unsigned int subtree_control)</argsstring>
        <name>cgroup_calc_child_subsys_mask</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>subtree_control</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="493" column="1" bodyfile="test.c" bodystart="493" bodyend="516"/>
        <references refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" compoundref="test_8c" startline="47" endline="52">cgroup_parent</references>
        <referencedby refid="test_8c_1a2fcd5031b202af403de1349ab7f6f19c" compoundref="test_8c" startline="517" endline="519">cgroup_refresh_child_subsys_mask</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a2fcd5031b202af403de1349ab7f6f19c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_refresh_child_subsys_mask</definition>
        <argsstring>(struct cgroup *cgrp)</argsstring>
        <name>cgroup_refresh_child_subsys_mask</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="517" column="1" bodyfile="test.c" bodystart="517" bodyend="519"/>
        <references refid="test_8c_1a1e3bdc4c41ec2e3349b97a1546d759bd" compoundref="test_8c" startline="493" endline="516">cgroup_calc_child_subsys_mask</references>
        <referencedby refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" compoundref="test_8c" startline="576" endline="634">rebind_subsystems</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a5808e21adbb735b336c1ac679347c4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_kn_unlock</definition>
        <argsstring>(struct kernfs_node *kn)</argsstring>
        <name>cgroup_kn_unlock</name>
        <param>
          <type>struct kernfs_node *</type>
          <declname>kn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="520" column="1" bodyfile="test.c" bodystart="520" bodyend="529"/>
        <references refid="test_8c_1a8586f17f40dfddd4aac8cd3cc6ee7ca8" compoundref="test_8c" startline="490" endline="492">cgroup_put</references>
        <referencedby refid="test_8c_1a110c830b6cc063865e7261d7af97a9d7" compoundref="test_8c" startline="530" endline="544">cgroup_kn_lock_live</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a110c830b6cc063865e7261d7af97a9d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct cgroup *</type>
        <definition>struct cgroup* cgroup_kn_lock_live</definition>
        <argsstring>(struct kernfs_node *kn)</argsstring>
        <name>cgroup_kn_lock_live</name>
        <param>
          <type>struct kernfs_node *</type>
          <declname>kn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="530" column="1" bodyfile="test.c" bodystart="530" bodyend="544"/>
        <references refid="test_8c_1af15f9d13bfd17b74f0144e392616937c" compoundref="test_8c" startline="487" endline="489">cgroup_tryget</references>
        <references refid="test_8c_1a7a415d00b56519c56fdac985d8bf4d42" compoundref="test_8c" startline="85" endline="87">cgroup_is_dead</references>
        <references refid="test_8c_1a5808e21adbb735b336c1ac679347c4f4" compoundref="test_8c" startline="520" endline="529">cgroup_kn_unlock</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a5e93b850f31f0d655fb81ca74d0250e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_cgroup_root</definition>
        <argsstring>(struct cgroup_root *root, struct cgroup_sb_opts *opts)</argsstring>
        <name>init_cgroup_root</name>
        <param>
          <type>struct cgroup_root *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>struct cgroup_sb_opts *</type>
          <declname>opts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="545" column="1" bodyfile="test.c" bodystart="545" bodyend="559"/>
        <references refid="test_8c_1af111ced8c1d78b1ecfbf87aec4957a23" compoundref="test_8c" startline="826" endline="838">init_cgroup_housekeeping</references>
        <referencedby refid="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" compoundref="test_8c" startline="407" endline="472">cgroup_mount</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a370ca239a4c3e93f577d808b8ba63235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_rm_file</definition>
        <argsstring>(struct cgroup *cgrp, const struct cftype *cft)</argsstring>
        <name>cgroup_rm_file</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>const struct cftype *</type>
          <declname>cft</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="560" column="1" bodyfile="test.c" bodystart="560" bodyend="564"/>
        <references refid="test_8c_1af194d4ac2c0e35ac177b576282f653aa" compoundref="test_8c" startline="400" endline="406">cgroup_file_name</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a67846fcf77a9328302e2cf200db18098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_clear_dir</definition>
        <argsstring>(struct cgroup *cgrp, unsigned int subsys_mask)</argsstring>
        <name>cgroup_clear_dir</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>subsys_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="565" column="1" bodyfile="test.c" bodystart="565" bodyend="575"/>
        <references refid="test_8c_1a868bd4e83d301006c5beacbd572ba8e3">cgroup_addrm_files</references>
        <referencedby refid="test_8c_1a63940b2ed22e1d221779f807abec7a9b" compoundref="test_8c" startline="328" endline="346">cgroup_populate_dir</referencedby>
        <referencedby refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" compoundref="test_8c" startline="576" endline="634">rebind_subsystems</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1ac5a237871349224e82728f07c4972104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cgroup_show_options</definition>
        <argsstring>(struct seq_file *seq, struct kernfs_root *kf_root)</argsstring>
        <name>cgroup_show_options</name>
        <param>
          <type>struct seq_file *</type>
          <declname>seq</declname>
        </param>
        <param>
          <type>struct kernfs_root *</type>
          <declname>kf_root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="635" column="1" bodyfile="test.c" bodystart="635" bodyend="655"/>
        <references refid="test_8c_1a7175acc19fa151655b9813104cf212ef" compoundref="test_8c" startline="308" endline="311">cgroup_root_from_kf</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a4ee64583bbd338753f70fe739f3e601d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int parse_cgroupfs_options</definition>
        <argsstring>(char *data, struct cgroup_sb_opts *opts)</argsstring>
        <name>parse_cgroupfs_options</name>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>struct cgroup_sb_opts *</type>
          <declname>opts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="656" column="1" bodyfile="test.c" bodystart="656" bodyend="758"/>
        <referencedby refid="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" compoundref="test_8c" startline="407" endline="472">cgroup_mount</referencedby>
        <referencedby refid="test_8c_1acd75edad54981c1b66e22efafcf6170d" compoundref="test_8c" startline="759" endline="802">cgroup_remount</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1acd75edad54981c1b66e22efafcf6170d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cgroup_remount</definition>
        <argsstring>(struct kernfs_root *kf_root, int *flags, char *data)</argsstring>
        <name>cgroup_remount</name>
        <param>
          <type>struct kernfs_root *</type>
          <declname>kf_root</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="759" column="1" bodyfile="test.c" bodystart="759" bodyend="802"/>
        <references refid="test_8c_1a7175acc19fa151655b9813104cf212ef" compoundref="test_8c" startline="308" endline="311">cgroup_root_from_kf</references>
        <references refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" compoundref="test_8c" startline="9">cgrp_dfl_root</references>
        <references refid="test_8c_1a4ee64583bbd338753f70fe739f3e601d" compoundref="test_8c" startline="656" endline="758">parse_cgroupfs_options</references>
        <references refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" compoundref="test_8c" startline="576" endline="634">rebind_subsystems</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1af61530e0f44bf8f7ff0127f07634b2dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_enable_task_cg_lists</definition>
        <argsstring>(void)</argsstring>
        <name>cgroup_enable_task_cg_lists</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="803" column="1" bodyfile="test.c" bodystart="803" bodyend="825"/>
        <references refid="test_8c_1a77142dfd8a9e4fb0822adc4bf1327ec6" compoundref="test_8c" startline="161" endline="163">get_css_set</references>
      </memberdef>
      <memberdef kind="function" id="test_8c_1af111ced8c1d78b1ecfbf87aec4957a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_cgroup_housekeeping</definition>
        <argsstring>(struct cgroup *cgrp)</argsstring>
        <name>init_cgroup_housekeeping</name>
        <param>
          <type>struct cgroup *</type>
          <declname>cgrp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="826" column="1" bodyfile="test.c" bodystart="826" bodyend="838"/>
        <referencedby refid="test_8c_1a5e93b850f31f0d655fb81ca74d0250e6" compoundref="test_8c" startline="545" endline="559">init_cgroup_root</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int cgroup_setup_root</definition>
        <argsstring>(struct cgroup_root *root, unsigned int ss_mask)</argsstring>
        <name>cgroup_setup_root</name>
        <param>
          <type>struct cgroup_root *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>ss_mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="839" column="1" bodyfile="test.c" bodystart="839" bodyend="879"/>
        <references refid="test_8c_1a1c97100246d4db525e74b605e678d713">LIST_HEAD</references>
        <references refid="test_8c_1a3bdf15853437c53e3b50717357229306" compoundref="test_8c" startline="26" endline="34">cgroup_idr_alloc</references>
        <references refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" compoundref="test_8c" startline="9">cgrp_dfl_root</references>
        <references refid="test_8c_1ad439c08d63718f18d5967b139d8706db" compoundref="test_8c" startline="18">cgroup_dfl_base_files</references>
        <references refid="test_8c_1a9f2ecbcace8a5696b7b64f975df1d6eb" compoundref="test_8c" startline="19">cgroup_legacy_base_files</references>
        <references refid="test_8c_1a868bd4e83d301006c5beacbd572ba8e3">cgroup_addrm_files</references>
        <references refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" compoundref="test_8c" startline="576" endline="634">rebind_subsystems</references>
        <references refid="test_8c_1ab9d448c34108c83bb918e79c7ca81719" compoundref="test_8c" startline="14">cgroup_root_count</references>
        <references refid="test_8c_1a0a202cfc7bd89985c0c032d80f09b6ab" compoundref="test_8c" startline="241" endline="255">link_css_set</references>
        <references refid="test_8c_1a27e5a3a27562d7883f0f0a77300b3c34" compoundref="test_8c" startline="321" endline="327">cgroup_exit_root_id</references>
        <references refid="test_8c_1af24b26442927c685a414fe0504583ec9" compoundref="test_8c" startline="220" endline="226">free_cgrp_cset_links</references>
        <referencedby refid="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" compoundref="test_8c" startline="407" endline="472">cgroup_mount</referencedby>
      </memberdef>
      <memberdef kind="function" id="test_8c_1a189c132d50f549d750e498083ddae57b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cgroup_kill_sb</definition>
        <argsstring>(struct super_block *sb)</argsstring>
        <name>cgroup_kill_sb</name>
        <param>
          <type>struct super_block *</type>
          <declname>sb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="test.c" line="880" column="1" bodyfile="test.c" bodystart="880" bodyend="889"/>
        <references refid="test_8c_1a7175acc19fa151655b9813104cf212ef" compoundref="test_8c" startline="308" endline="311">cgroup_root_from_kf</references>
        <references refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" compoundref="test_8c" startline="9">cgrp_dfl_root</references>
        <references refid="test_8c_1a8586f17f40dfddd4aac8cd3cc6ee7ca8" compoundref="test_8c" startline="490" endline="492">cgroup_put</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;linux/cgroup.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;linux/cred.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"><ref refid="test_8c_1a05c8c97a68ab506615dfb098bc89186a" kindref="member">DEFINE_SPINLOCK</ref>(cgroup_idr_lock);</highlight></codeline>
<codeline lineno="4"><highlight class="normal"><ref refid="test_8c_1a05c8c97a68ab506615dfb098bc89186a" kindref="member">DEFINE_SPINLOCK</ref>(release_agent_path_lock);</highlight></codeline>
<codeline lineno="5" refid="test_8c_1afd402381a4b5a3f75f64dd470824589b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">workqueue_struct<sp/>*<ref refid="test_8c_1afd402381a4b5a3f75f64dd470824589b" kindref="member">cgroup_destroy_wq</ref>;</highlight></codeline>
<codeline lineno="6" refid="test_8c_1ac162dbcdb09b463ef9c37a9f7fe7dfb0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">workqueue_struct<sp/>*<ref refid="test_8c_1ac162dbcdb09b463ef9c37a9f7fe7dfb0" kindref="member">cgroup_pidlist_destroy_wq</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUBSYS(_x)<sp/>[_x<sp/>##<sp/>_cgrp_id]<sp/>=<sp/>&amp;_x<sp/>##<sp/>_cgrp_subsys,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="test_8c_1a3ebcb2f103577578af500979b2be8936" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUBSYS(_x)<sp/>[_x<sp/>##<sp/>_cgrp_id]<sp/>=<sp/>#_x,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_root<sp/><ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>;</highlight></codeline>
<codeline lineno="10" refid="test_8c_1a7bf0f1964f432e905688b1bb4dc5fa0e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a7bf0f1964f432e905688b1bb4dc5fa0e" kindref="member">cgrp_dfl_root_visible</ref>;</highlight></codeline>
<codeline lineno="11" refid="test_8c_1ace9442310e972def46dbeeabe426c08d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test_8c_1ace9442310e972def46dbeeabe426c08d" kindref="member">cgroup_legacy_files_on_dfl</ref>;</highlight></codeline>
<codeline lineno="12" refid="test_8c_1a71017b03a69b1901dfc31edec56d25cd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a71017b03a69b1901dfc31edec56d25cd" kindref="member">cgrp_dfl_root_inhibit_ss_mask</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><ref refid="test_8c_1a1c97100246d4db525e74b605e678d713" kindref="member">LIST_HEAD</ref>(cgroup_roots);</highlight></codeline>
<codeline lineno="14" refid="test_8c_1ab9d448c34108c83bb918e79c7ca81719" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1ab9d448c34108c83bb918e79c7ca81719" kindref="member">cgroup_root_count</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><ref refid="test_8c_1acdd9356764535c60591cc3efaf65c62b" kindref="member">DEFINE_IDR</ref>(cgroup_hierarchy_idr);</highlight></codeline>
<codeline lineno="16" refid="test_8c_1aece34b69a557dfc2c1e0e401f075278d" refkind="member"><highlight class="normal">u64<sp/><ref refid="test_8c_1aece34b69a557dfc2c1e0e401f075278d" kindref="member">css_serial_nr_next</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="17" refid="test_8c_1aa064fb7cbb7a2d8ea47a031f240e60ca" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>need_forkexit_callback<sp/><ref refid="test_8c_1aa064fb7cbb7a2d8ea47a031f240e60ca" kindref="member">__read_mostly</ref>;</highlight></codeline>
<codeline lineno="18" refid="test_8c_1ad439c08d63718f18d5967b139d8706db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cftype<sp/><ref refid="test_8c_1ad439c08d63718f18d5967b139d8706db" kindref="member">cgroup_dfl_base_files</ref>[];</highlight></codeline>
<codeline lineno="19" refid="test_8c_1a9f2ecbcace8a5696b7b64f975df1d6eb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cftype<sp/><ref refid="test_8c_1a9f2ecbcace8a5696b7b64f975df1d6eb" kindref="member">cgroup_legacy_base_files</ref>[];</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" kindref="member">rebind_subsystems</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_root<sp/>*dst_root,</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ss_mask);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1aa5e610ba5b42c1c63cc3154ada71cfe9" kindref="member">cgroup_destroy_locked</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a00cc07111db2df581c5a1f815db3e50c" kindref="member">create_css</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_subsys<sp/>*ss,</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>visible);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a6b9234da085371688d97fc14002612d7" kindref="member">css_release</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>percpu_ref<sp/>*ref);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1afefe22bdc638323a772b1e9b0d73701f" kindref="member">kill_css</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_subsys_state<sp/>*css);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a868bd4e83d301006c5beacbd572ba8e3" kindref="member">cgroup_addrm_files</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cftype<sp/>cfts[],<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_add);</highlight></codeline>
<codeline lineno="26" refid="test_8c_1a3bdf15853437c53e3b50717357229306" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a3bdf15853437c53e3b50717357229306" kindref="member">cgroup_idr_alloc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>idr<sp/>*idr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>start,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>end,<sp/>gfp_t<sp/>gfp_mask){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>idr_preload(gfp_mask);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>spin_lock_bh(&amp;cgroup_idr_lock);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>idr_alloc(idr,<sp/>ptr,<sp/>start,<sp/>end,<sp/>gfp_mask);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>spin_unlock_bh(&amp;cgroup_idr_lock);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>idr_preload_end();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35" refid="test_8c_1afcee9a096b385689c54b60a6067e0b69" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="test_8c_1afcee9a096b385689c54b60a6067e0b69" kindref="member">cgroup_idr_replace</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>idr<sp/>*idr,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ret;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>spin_lock_bh(&amp;cgroup_idr_lock);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>idr_replace(idr,<sp/>ptr,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>spin_unlock_bh(&amp;cgroup_idr_lock);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42" refid="test_8c_1a318bf86f2978e58eff3df756abac3d42" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a318bf86f2978e58eff3df756abac3d42" kindref="member">cgroup_idr_remove</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>idr<sp/>*idr,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>spin_lock_bh(&amp;cgroup_idr_lock);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>idr_remove(idr,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>spin_unlock_bh(&amp;cgroup_idr_lock);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47" refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*<ref refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" kindref="member">cgroup_parent</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys_state<sp/>*parent_css<sp/>=<sp/>cgrp-&gt;self.parent;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent_css)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>container_of(parent_css,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup,<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53" refid="test_8c_1ae4afe366b1c79185687211d3a275c101" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys_state<sp/>*<ref refid="test_8c_1ae4afe366b1c79185687211d3a275c101" kindref="member">cgroup_css</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_subsys<sp/>*ss){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ss)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rcu_dereference_check(cgrp-&gt;subsys[ss-&gt;id],<sp/>lockdep_is_held(&amp;cgroup_mutex));</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;cgrp-&gt;self;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59" refid="test_8c_1a28887f0a6c976aada94da8d07c849edd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys_state<sp/>*<ref refid="test_8c_1a28887f0a6c976aada94da8d07c849edd" kindref="member">cgroup_e_css</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_subsys<sp/>*ss){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ss)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;cgrp-&gt;self;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(cgrp-&gt;root-&gt;subsys_mask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>ss-&gt;id)))</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" kindref="member">cgroup_parent</ref>(cgrp)<sp/>&amp;&amp;<sp/>!(<ref refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" kindref="member">cgroup_parent</ref>(cgrp)-&gt;child_subsys_mask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>ss-&gt;id))){</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgrp<sp/>=<sp/><ref refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" kindref="member">cgroup_parent</ref>(cgrp);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test_8c_1ae4afe366b1c79185687211d3a275c101" kindref="member">cgroup_css</ref>(cgrp,<sp/>ss);</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70" refid="test_8c_1ae36262e91cd1d6996639e183150a8260" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys_state<sp/>*<ref refid="test_8c_1ae36262e91cd1d6996639e183150a8260" kindref="member">cgroup_get_e_css</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_subsys<sp/>*ss){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys_state<sp/>*css;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>rcu_read_lock();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>css<sp/>=<sp/><ref refid="test_8c_1ae4afe366b1c79185687211d3a275c101" kindref="member">cgroup_css</ref>(cgrp,<sp/>ss);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(css<sp/>&amp;&amp;<sp/>css_tryget_online(css))</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_unlock;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgrp<sp/>=<sp/><ref refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" kindref="member">cgroup_parent</ref>(cgrp);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cgrp);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>css<sp/>=<sp/>init_css_set.subsys[ss-&gt;id];</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>css_get(css);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">out_unlock:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>rcu_read_unlock();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>css;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85" refid="test_8c_1a7a415d00b56519c56fdac985d8bf4d42" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a7a415d00b56519c56fdac985d8bf4d42" kindref="member">cgroup_is_dead</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp){</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(cgrp-&gt;self.flags<sp/>&amp;<sp/>CSS_ONLINE);</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88" refid="test_8c_1af931fcbb486993665177942a7aebc6a1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys_state<sp/>*<ref refid="test_8c_1af931fcbb486993665177942a7aebc6a1" kindref="member">of_css</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>kernfs_open_file<sp/>*of){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*cgrp<sp/>=<sp/>of-&gt;kn-&gt;parent-&gt;priv;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cftype<sp/>*cft<sp/>=<sp/>of_cft(of);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cft-&gt;ss)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>rcu_dereference_raw(cgrp-&gt;subsys[cft-&gt;ss-&gt;id]);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;cgrp-&gt;self;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96" refid="test_8c_1a2533ef0c2bbc63c62c277230124144d2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a2533ef0c2bbc63c62c277230124144d2" kindref="member">cgroup_is_descendant</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*ancestor){</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cgrp)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cgrp<sp/>==<sp/>ancestor)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgrp<sp/>=<sp/><ref refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" kindref="member">cgroup_parent</ref>(cgrp);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104" refid="test_8c_1ac8ef1bd11f262f341e3eb89a1b98b74a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1ac8ef1bd11f262f341e3eb89a1b98b74a" kindref="member">notify_on_release</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp){</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>test_bit(CGRP_NOTIFY_ON_RELEASE,<sp/>&amp;cgrp-&gt;flags);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107" refid="test_8c_1a4dec1acf21a1593560da2e68128fdddd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a4dec1acf21a1593560da2e68128fdddd" kindref="member">cgroup_update_populated</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>populated){</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>trigger;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(populated)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger<sp/>=<sp/>!cgrp-&gt;populated_cnt++;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trigger<sp/>=<sp/>!--cgrp-&gt;populated_cnt;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!trigger)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cgrp-&gt;populated_kn)</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernfs_notify(cgrp-&gt;populated_kn);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgrp<sp/>=<sp/><ref refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" kindref="member">cgroup_parent</ref>(cgrp);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(cgrp);</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122" refid="test_8c_1afe3d4d1cdbd1239c18727179de2569a1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="test_8c_1afe3d4d1cdbd1239c18727179de2569a1" kindref="member">css_set_hash</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_subsys_state<sp/>*css[]){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>key<sp/>=<sp/>0UL;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>i)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>key<sp/>+=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long)css[i];</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/>(key<sp/>&gt;&gt;<sp/>16)<sp/>^<sp/>key;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131" refid="test_8c_1a6103b359164aab19494cacec60e73e6e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a6103b359164aab19494cacec60e73e6e" kindref="member">put_css_set_locked</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>css_set<sp/>*cset){</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgrp_cset_link<sp/>*link,<sp/>*tmp_link;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ssid;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!atomic_dec_and_test(&amp;cset-&gt;refcount))</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>ssid)</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;cset-&gt;e_cset_node[ssid]);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_del(&amp;cset-&gt;hlist);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>css_set_count--;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(link,<sp/>tmp_link,<sp/>&amp;cset-&gt;cgrp_links,<sp/>cgrp_link)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*cgrp<sp/>=<sp/>link-&gt;cgrp;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;link-&gt;cset_link);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;link-&gt;cgrp_link);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list_empty(&amp;cgrp-&gt;cset_links))<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a4dec1acf21a1593560da2e68128fdddd" kindref="member">cgroup_update_populated</ref>(cgrp,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check_for_release(cgrp);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kfree(link);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>kfree_rcu(cset,<sp/>rcu_head);</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154" refid="test_8c_1af6a2c498a5f9f5dccaf306d649ac1926" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1af6a2c498a5f9f5dccaf306d649ac1926" kindref="member">put_css_set</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>css_set<sp/>*cset){</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(atomic_add_unless(&amp;cset-&gt;refcount,<sp/>-1,<sp/>1))</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>down_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a6103b359164aab19494cacec60e73e6e" kindref="member">put_css_set_locked</ref>(cset);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>up_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161" refid="test_8c_1a77142dfd8a9e4fb0822adc4bf1327ec6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a77142dfd8a9e4fb0822adc4bf1327ec6" kindref="member">get_css_set</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>css_set<sp/>*cset){</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>atomic_inc(&amp;cset-&gt;refcount);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164" refid="test_8c_1a53e55b164eab887e2ca8cddde65a5d01" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a53e55b164eab887e2ca8cddde65a5d01" kindref="member">compare_css_sets</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>css_set<sp/>*cset,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>css_set<sp/>*old_cset,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*new_cgrp,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_subsys_state<sp/>*</highlight><highlight class="keyword">template</highlight><highlight class="normal">[]){</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">list_head<sp/>*l1,<sp/>*l2;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(memcmp(</highlight><highlight class="keyword">template</highlight><highlight class="normal">,<sp/>cset-&gt;subsys,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cset-&gt;subsys)))</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>l1<sp/>=<sp/>&amp;cset-&gt;cgrp_links;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>l2<sp/>=<sp/>&amp;old_cset-&gt;cgrp_links;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgrp_cset_link<sp/>*link1,<sp/>*link2;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*cgrp1,<sp/>*cgrp2;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l1<sp/>=<sp/>l1-&gt;next;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l2<sp/>=<sp/>l2-&gt;next;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l1<sp/>==<sp/>&amp;cset-&gt;cgrp_links)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUG_ON(l2<sp/>!=<sp/>&amp;old_cset-&gt;cgrp_links);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUG_ON(l2<sp/>==<sp/>&amp;old_cset-&gt;cgrp_links);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link1<sp/>=<sp/>list_entry(l1,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgrp_cset_link,<sp/>cgrp_link);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link2<sp/>=<sp/>list_entry(l2,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgrp_cset_link,<sp/>cgrp_link);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgrp1<sp/>=<sp/>link1-&gt;cgrp;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgrp2<sp/>=<sp/>link2-&gt;cgrp;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BUG_ON(cgrp1-&gt;root<sp/>!=<sp/>cgrp2-&gt;root);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cgrp1-&gt;root<sp/>==<sp/>new_cgrp-&gt;root)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cgrp1<sp/>!=<sp/>new_cgrp)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cgrp1<sp/>!=<sp/>cgrp2)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198" refid="test_8c_1ac22cad6e76f7885f80c99a25538a2950" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">css_set<sp/>*<ref refid="test_8c_1ac22cad6e76f7885f80c99a25538a2950" kindref="member">find_existing_css_set</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>css_set<sp/>*old_cset,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_subsys_state<sp/>*</highlight><highlight class="keyword">template</highlight><highlight class="normal">[]){</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_root<sp/>*root<sp/>=<sp/>cgrp-&gt;root;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">css_set<sp/>*cset;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;subsys_mask<sp/>&amp;<sp/>(1UL<sp/>&lt;&lt;<sp/>i))<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">[i]<sp/>=<sp/><ref refid="test_8c_1a28887f0a6c976aada94da8d07c849edd" kindref="member">cgroup_e_css</ref>(cgrp,<sp/>ss);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">[i]<sp/>=<sp/>old_cset-&gt;subsys[i];</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/><ref refid="test_8c_1afe3d4d1cdbd1239c18727179de2569a1" kindref="member">css_set_hash</ref>(</highlight><highlight class="keyword">template</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_for_each_possible(css_set_table,<sp/>cset,<sp/>hlist,<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="test_8c_1a53e55b164eab887e2ca8cddde65a5d01" kindref="member">compare_css_sets</ref>(cset,<sp/>old_cset,<sp/>cgrp,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cset;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">}</highlight></codeline>
<codeline lineno="220" refid="test_8c_1af24b26442927c685a414fe0504583ec9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1af24b26442927c685a414fe0504583ec9" kindref="member">free_cgrp_cset_links</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>list_head<sp/>*links_to_free){</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgrp_cset_link<sp/>*link,<sp/>*tmp_link;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(link,<sp/>tmp_link,<sp/>links_to_free,<sp/>cset_link)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;link-&gt;cset_link);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kfree(link);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227" refid="test_8c_1a1bb2b2486671a5058ede4348301aa354" refkind="member"><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a1bb2b2486671a5058ede4348301aa354" kindref="member">allocate_cgrp_cset_links</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>list_head<sp/>*tmp_links){</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgrp_cset_link<sp/>*link;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(tmp_links);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>kzalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*link),<sp/>GFP_KERNEL);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!link)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1af24b26442927c685a414fe0504583ec9" kindref="member">free_cgrp_cset_links</ref>(tmp_links);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-ENOMEM;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add(&amp;link-&gt;cset_link,<sp/>tmp_links);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241" refid="test_8c_1a0a202cfc7bd89985c0c032d80f09b6ab" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a0a202cfc7bd89985c0c032d80f09b6ab" kindref="member">link_css_set</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>list_head<sp/>*tmp_links,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>css_set<sp/>*cset,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp){</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgrp_cset_link<sp/>*link;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>BUG_ON(list_empty(tmp_links));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cgroup_on_dfl(cgrp)){</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cset-&gt;dfl_cgrp<sp/>=<sp/>cgrp;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>link<sp/>=<sp/>list_first_entry(tmp_links,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgrp_cset_link,<sp/>cset_link);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;cset<sp/>=<sp/>cset;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>link-&gt;cgrp<sp/>=<sp/>cgrp;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(list_empty(&amp;cgrp-&gt;cset_links)){</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a4dec1acf21a1593560da2e68128fdddd" kindref="member">cgroup_update_populated</ref>(cgrp,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>list_move(&amp;link-&gt;cset_link,<sp/>&amp;cgrp-&gt;cset_links);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;link-&gt;cgrp_link,<sp/>&amp;cset-&gt;cgrp_links);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256" refid="test_8c_1a8607450f9a3dc545dc90c099155cac2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">css_set<sp/>*<ref refid="test_8c_1a8607450f9a3dc545dc90c099155cac2e" kindref="member">find_css_set</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>css_set<sp/>*old_cset,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp){</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys_state<sp/>*</highlight><highlight class="keyword">template</highlight><highlight class="normal">[CGROUP_SUBSYS_COUNT]<sp/>=<sp/>{<sp/>};</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">css_set<sp/>*cset;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">list_head<sp/>tmp_links;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgrp_cset_link<sp/>*link;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>key;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ssid;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>down_read(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>cset<sp/>=<sp/><ref refid="test_8c_1ac22cad6e76f7885f80c99a25538a2950" kindref="member">find_existing_css_set</ref>(old_cset,<sp/>cgrp,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cset){</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a77142dfd8a9e4fb0822adc4bf1327ec6" kindref="member">get_css_set</ref>(cset);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>up_read(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cset){</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cset;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>cset<sp/>=<sp/>kzalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*cset),<sp/>GFP_KERNEL);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cset){</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test_8c_1a1bb2b2486671a5058ede4348301aa354" kindref="member">allocate_cgrp_cset_links</ref>(<ref refid="test_8c_1ab9d448c34108c83bb918e79c7ca81719" kindref="member">cgroup_root_count</ref>,<sp/>&amp;tmp_links)<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kfree(cset);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>atomic_set(&amp;cset-&gt;refcount,<sp/>1);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;cset-&gt;cgrp_links);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;cset-&gt;tasks);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;cset-&gt;mg_tasks);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;cset-&gt;mg_preload_node);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;cset-&gt;mg_node);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_HLIST_NODE(&amp;cset-&gt;hlist);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(cset-&gt;subsys,<sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(cset-&gt;subsys));</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>down_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry(link,<sp/>&amp;old_cset-&gt;cgrp_links,<sp/>cgrp_link)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*c<sp/>=<sp/>link-&gt;cgrp;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;root<sp/>==<sp/>cgrp-&gt;root){</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>cgrp;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a0a202cfc7bd89985c0c032d80f09b6ab" kindref="member">link_css_set</ref>(&amp;tmp_links,<sp/>cset,<sp/>c);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>BUG_ON(!list_empty(&amp;tmp_links));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>css_set_count++;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>key<sp/>=<sp/><ref refid="test_8c_1afe3d4d1cdbd1239c18727179de2569a1" kindref="member">css_set_hash</ref>(cset-&gt;subsys);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_add(css_set_table,<sp/>&amp;cset-&gt;hlist,<sp/>key);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>ssid);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add_tail(&amp;cset-&gt;e_cset_node[ssid],<sp/>&amp;cset-&gt;subsys[ssid]-&gt;cgroup-&gt;e_csets[ssid]);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>up_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cset;</highlight></codeline>
<codeline lineno="306"><highlight class="normal">}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="test_8c_1a7175acc19fa151655b9813104cf212ef" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_root<sp/>*<ref refid="test_8c_1a7175acc19fa151655b9813104cf212ef" kindref="member">cgroup_root_from_kf</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>kernfs_root<sp/>*kf_root){</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*root_cgrp<sp/>=<sp/>kf_root-&gt;kn-&gt;priv;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>root_cgrp-&gt;root;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312" refid="test_8c_1a6767892481facd6056885b7b981d5eb0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a6767892481facd6056885b7b981d5eb0" kindref="member">cgroup_init_root_id</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_root<sp/>*root){</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>idr_alloc_cyclic(&amp;cgroup_hierarchy_idr,<sp/>root,<sp/>0,<sp/>0,<sp/>GFP_KERNEL);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;hierarchy_id<sp/>=<sp/>id;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321" refid="test_8c_1a27e5a3a27562d7883f0f0a77300b3c34" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a27e5a3a27562d7883f0f0a77300b3c34" kindref="member">cgroup_exit_root_id</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_root<sp/>*root){</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;hierarchy_id)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idr_remove(&amp;cgroup_hierarchy_idr,<sp/>root-&gt;hierarchy_id);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root-&gt;hierarchy_id<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328" refid="test_8c_1a63940b2ed22e1d221779f807abec7a9b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a63940b2ed22e1d221779f807abec7a9b" kindref="member">cgroup_populate_dir</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subsys_mask){</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cftype<sp/>*cfts;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(subsys_mask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>i))){</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_for_each_entry(cfts,<sp/>&amp;ss-&gt;cfts,<sp/>node)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="test_8c_1a868bd4e83d301006c5beacbd572ba8e3" kindref="member">cgroup_addrm_files</ref>(cgrp,<sp/>cfts,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0){</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a67846fcf77a9328302e2cf200db18098" kindref="member">cgroup_clear_dir</ref>(cgrp,<sp/>subsys_mask);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="346"><highlight class="normal">}</highlight></codeline>
<codeline lineno="347" refid="test_8c_1a1a45d93c13f00906ae1e434da87c442e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a1a45d93c13f00906ae1e434da87c442e" kindref="member">cgroup_free_root</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_root<sp/>*root){</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WARN_ON_ONCE(root-&gt;hierarchy_id);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idr_destroy(&amp;root-&gt;cgroup_idr);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kfree(root);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal">}</highlight></codeline>
<codeline lineno="354" refid="test_8c_1aecdc54fcc801da61b237c60f924a220e" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1aecdc54fcc801da61b237c60f924a220e" kindref="member">cgroup_destroy_root</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_root<sp/>*root){</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*cgrp<sp/>=<sp/>&amp;root-&gt;cgrp;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgrp_cset_link<sp/>*link,<sp/>*tmp_link;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_lock(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>BUG_ON(atomic_read(&amp;root-&gt;nr_cgrps));</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>BUG_ON(!list_empty(&amp;cgrp-&gt;self.children));</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" kindref="member">rebind_subsystems</ref>(&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>,<sp/>root-&gt;subsys_mask);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>down_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/>list_for_each_entry_safe(link,<sp/>tmp_link,<sp/>&amp;cgrp-&gt;cset_links,<sp/>cset_link)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;link-&gt;cset_link);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;link-&gt;cgrp_link);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kfree(link);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>up_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list_empty(&amp;root-&gt;root_list))<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_del(&amp;root-&gt;root_list);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1ab9d448c34108c83bb918e79c7ca81719" kindref="member">cgroup_root_count</ref>--;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a27e5a3a27562d7883f0f0a77300b3c34" kindref="member">cgroup_exit_root_id</ref>(root);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_unlock(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>kernfs_destroy_root(root-&gt;kf_root);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a1a45d93c13f00906ae1e434da87c442e" kindref="member">cgroup_free_root</ref>(root);</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377" refid="test_8c_1a880be09f59530c2b96e2607fb9850800" refkind="member"><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*<ref refid="test_8c_1a880be09f59530c2b96e2607fb9850800" kindref="member">cset_cgroup_from_root</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>css_set<sp/>*cset,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_root<sp/>*root){</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*res<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cset<sp/>==<sp/>&amp;init_css_set)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>&amp;root-&gt;cgrp;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgrp_cset_link<sp/>*link;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_for_each_entry(link,<sp/>&amp;cset-&gt;cgrp_links,<sp/>cgrp_link)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*c<sp/>=<sp/>link-&gt;cgrp;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c-&gt;root<sp/>==<sp/>root)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>BUG_ON(!res);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397" refid="test_8c_1a4005c37a806eb63637bb54ed67972308" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*<ref refid="test_8c_1a4005c37a806eb63637bb54ed67972308" kindref="member">task_cgroup_from_root</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>task_struct<sp/>*task,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_root<sp/>*root){</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a880be09f59530c2b96e2607fb9850800" kindref="member">cset_cgroup_from_root</ref>(task_css_set(task),<sp/>root);</highlight></codeline>
<codeline lineno="399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="400" refid="test_8c_1af194d4ac2c0e35ac177b576282f653aa" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="test_8c_1af194d4ac2c0e35ac177b576282f653aa" kindref="member">cgroup_file_name</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cftype<sp/>*cft,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf){</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cft-&gt;ss<sp/>&amp;&amp;<sp/>!(cft-&gt;flags<sp/>&amp;<sp/>CFTYPE_NO_PREFIX)<sp/>&amp;&amp;<sp/>!(cgrp-&gt;root-&gt;flags<sp/>&amp;<sp/>CGRP_ROOT_NOPREFIX))</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(buf,<sp/>CGROUP_FILE_NAME_MAX,<sp/></highlight><highlight class="stringliteral">&quot;%s.%s&quot;</highlight><highlight class="normal">,<sp/>cft-&gt;ss-&gt;name,<sp/>cft-&gt;name);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strncpy(buf,<sp/>cft-&gt;name,<sp/>CGROUP_FILE_NAME_MAX);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407" refid="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dentry<sp/>*<ref refid="test_8c_1a44ba40f8db988cfa6b96b16d6891a185" kindref="member">cgroup_mount</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>file_system_type<sp/>*fs_type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*unused_dev_name,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*data){</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">super_block<sp/>*pinned_sb<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_root<sp/>*root;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_sb_opts<sp/>opts;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">dentry<sp/>*dentry;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>new_sb;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_lock(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="test_8c_1a4ee64583bbd338753f70fe739f3e601d" kindref="member">parse_cgroupfs_options</ref>(data,<sp/>&amp;opts);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts.flags<sp/>&amp;<sp/>CGRP_ROOT_SANE_BEHAVIOR)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a7bf0f1964f432e905688b1bb4dc5fa0e" kindref="member">cgrp_dfl_root_visible</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>=<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1abf926db5eff22e3650e1787776a9a5bd" kindref="member">cgroup_get</ref>(&amp;root-&gt;cgrp);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_unlock;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(opts.subsys_mask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>i))<sp/>||</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss-&gt;root<sp/>==<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!percpu_ref_tryget_live(&amp;ss-&gt;root-&gt;cgrp.self.refcnt))<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex_unlock(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>msleep(10);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>restart_syscall();</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_free;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a8586f17f40dfddd4aac8cd3cc6ee7ca8" kindref="member">cgroup_put</ref>(&amp;ss-&gt;root-&gt;cgrp);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>name_match<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root<sp/>==<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>)</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts.name)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(opts.name,<sp/>root-&gt;name))</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_match<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((opts.subsys_mask<sp/>||<sp/>opts.none)<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(opts.subsys_mask<sp/>!=<sp/>root-&gt;subsys_mask))<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!name_match)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-EBUSY;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_unlock;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;flags<sp/>^<sp/>opts.flags)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_warn(</highlight><highlight class="stringliteral">&quot;new<sp/>mount<sp/>options<sp/>do<sp/>not<sp/>match<sp/>the<sp/>existing<sp/>superblock,<sp/>will<sp/>be<sp/>ignored\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/>pinned_sb<sp/>=<sp/>kernfs_pin_sb(root-&gt;kf_root,<sp/>NULL);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!opts.subsys_mask<sp/>&amp;&amp;<sp/>!opts.none)<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-EINVAL;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_unlock;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>root<sp/>=<sp/>kzalloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*root),<sp/>GFP_KERNEL);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!root)<sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-ENOMEM;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_unlock;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a5e93b850f31f0d655fb81ca74d0250e6" kindref="member">init_cgroup_root</ref>(root,<sp/>&amp;opts);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" kindref="member">cgroup_setup_root</ref>(root,<sp/>opts.subsys_mask);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a1a45d93c13f00906ae1e434da87c442e" kindref="member">cgroup_free_root</ref>(root);</highlight></codeline>
<codeline lineno="466"><highlight class="normal">out_unlock:</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_unlock(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="468"><highlight class="normal">out_free:</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>kfree(opts.release_agent);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>kfree(opts.name);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dentry;</highlight></codeline>
<codeline lineno="472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="473" refid="test_8c_1afd8b042dd211e4b22286235dc46a717e" refkind="member"><highlight class="normal">umode_t<sp/><ref refid="test_8c_1afd8b042dd211e4b22286235dc46a717e" kindref="member">cgroup_file_mode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cftype<sp/>*cft){</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>umode_t<sp/>mode<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cft-&gt;mode)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cft-&gt;mode;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cft-&gt;read_u64<sp/>||<sp/>cft-&gt;read_s64<sp/>||<sp/>cft-&gt;seq_show)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>|=<sp/>S_IRUGO;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cft-&gt;write_u64<sp/>||<sp/>cft-&gt;write_s64<sp/>||<sp/>cft-&gt;write)</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mode<sp/>|=<sp/>S_IWUSR;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mode;</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483" refid="test_8c_1abf926db5eff22e3650e1787776a9a5bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1abf926db5eff22e3650e1787776a9a5bd" kindref="member">cgroup_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp){</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>WARN_ON_ONCE(<ref refid="test_8c_1a7a415d00b56519c56fdac985d8bf4d42" kindref="member">cgroup_is_dead</ref>(cgrp));</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>css_get(&amp;cgrp-&gt;self);</highlight></codeline>
<codeline lineno="486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="487" refid="test_8c_1af15f9d13bfd17b74f0144e392616937c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="test_8c_1af15f9d13bfd17b74f0144e392616937c" kindref="member">cgroup_tryget</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp){</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>css_tryget(&amp;cgrp-&gt;self);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
<codeline lineno="490" refid="test_8c_1a8586f17f40dfddd4aac8cd3cc6ee7ca8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a8586f17f40dfddd4aac8cd3cc6ee7ca8" kindref="member">cgroup_put</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp){</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>css_put(&amp;cgrp-&gt;self);</highlight></codeline>
<codeline lineno="492"><highlight class="normal">}</highlight></codeline>
<codeline lineno="493" refid="test_8c_1a1e3bdc4c41ec2e3349b97a1546d759bd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a1e3bdc4c41ec2e3349b97a1546d759bd" kindref="member">cgroup_calc_child_subsys_mask</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subtree_control){</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*parent<sp/>=<sp/><ref refid="test_8c_1a518b4f87673a5497fc207cf2eda3b3cb" kindref="member">cgroup_parent</ref>(cgrp);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cur_ss_mask<sp/>=<sp/>subtree_control;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ssid;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cgroup_on_dfl(cgrp))</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cur_ss_mask;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>new_ss_mask<sp/>=<sp/>cur_ss_mask;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>ssid)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cur_ss_mask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>ssid))</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_ss_mask<sp/>|=<sp/>ss-&gt;depends_on;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parent)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_ss_mask<sp/>&amp;=<sp/>parent-&gt;child_subsys_mask;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new_ss_mask<sp/>&amp;=<sp/>cgrp-&gt;root-&gt;subsys_mask;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(new_ss_mask<sp/>==<sp/>cur_ss_mask)</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cur_ss_mask<sp/>=<sp/>new_ss_mask;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cur_ss_mask;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517" refid="test_8c_1a2fcd5031b202af403de1349ab7f6f19c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a2fcd5031b202af403de1349ab7f6f19c" kindref="member">cgroup_refresh_child_subsys_mask</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp){</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>cgrp-&gt;child_subsys_mask<sp/>=<sp/><ref refid="test_8c_1a1e3bdc4c41ec2e3349b97a1546d759bd" kindref="member">cgroup_calc_child_subsys_mask</ref>(cgrp,<sp/>cgrp-&gt;subtree_control);</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520" refid="test_8c_1a5808e21adbb735b336c1ac679347c4f4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a5808e21adbb735b336c1ac679347c4f4" kindref="member">cgroup_kn_unlock</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>kernfs_node<sp/>*kn){</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*cgrp;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kernfs_type(kn)<sp/>==<sp/>KERNFS_DIR)</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgrp<sp/>=<sp/>kn-&gt;priv;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgrp<sp/>=<sp/>kn-&gt;parent-&gt;priv;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_unlock(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>kernfs_unbreak_active_protection(kn);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a8586f17f40dfddd4aac8cd3cc6ee7ca8" kindref="member">cgroup_put</ref>(cgrp);</highlight></codeline>
<codeline lineno="529"><highlight class="normal">}</highlight></codeline>
<codeline lineno="530" refid="test_8c_1a110c830b6cc063865e7261d7af97a9d7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*<ref refid="test_8c_1a110c830b6cc063865e7261d7af97a9d7" kindref="member">cgroup_kn_lock_live</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>kernfs_node<sp/>*kn){</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*cgrp;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(kernfs_type(kn)<sp/>==<sp/>KERNFS_DIR)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgrp<sp/>=<sp/>kn-&gt;priv;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cgrp<sp/>=<sp/>kn-&gt;parent-&gt;priv;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="test_8c_1af15f9d13bfd17b74f0144e392616937c" kindref="member">cgroup_tryget</ref>(cgrp))</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>kernfs_break_active_protection(kn);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_lock(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="test_8c_1a7a415d00b56519c56fdac985d8bf4d42" kindref="member">cgroup_is_dead</ref>(cgrp))</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cgrp;</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a5808e21adbb735b336c1ac679347c4f4" kindref="member">cgroup_kn_unlock</ref>(kn);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545" refid="test_8c_1a5e93b850f31f0d655fb81ca74d0250e6" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a5e93b850f31f0d655fb81ca74d0250e6" kindref="member">init_cgroup_root</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_root<sp/>*root,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_sb_opts<sp/>*opts){</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*cgrp<sp/>=<sp/>&amp;root-&gt;cgrp;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;root-&gt;root_list);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>atomic_set(&amp;root-&gt;nr_cgrps,<sp/>1);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>cgrp-&gt;root<sp/>=<sp/>root;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1af111ced8c1d78b1ecfbf87aec4957a23" kindref="member">init_cgroup_housekeeping</ref>(cgrp);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>idr_init(&amp;root-&gt;cgroup_idr);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;flags<sp/>=<sp/>opts-&gt;flags;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts-&gt;release_agent)</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(root-&gt;release_agent_path,<sp/>opts-&gt;release_agent);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts-&gt;name)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(root-&gt;name,<sp/>opts-&gt;name);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts-&gt;cpuset_clone_children)</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_bit(CGRP_CPUSET_CLONE_CHILDREN,<sp/>&amp;root-&gt;cgrp.flags);</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560" refid="test_8c_1a370ca239a4c3e93f577d808b8ba63235" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a370ca239a4c3e93f577d808b8ba63235" kindref="member">cgroup_rm_file</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cftype<sp/>*cft){</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>name[CGROUP_FILE_NAME_MAX];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>kernfs_remove_by_name(cgrp-&gt;kn,<sp/><ref refid="test_8c_1af194d4ac2c0e35ac177b576282f653aa" kindref="member">cgroup_file_name</ref>(cgrp,<sp/>cft,<sp/>name));</highlight></codeline>
<codeline lineno="564"><highlight class="normal">}</highlight></codeline>
<codeline lineno="565" refid="test_8c_1a67846fcf77a9328302e2cf200db18098" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a67846fcf77a9328302e2cf200db18098" kindref="member">cgroup_clear_dir</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>subsys_mask){</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cftype<sp/>*cfts;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(subsys_mask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>i)))</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_for_each_entry(cfts,<sp/>&amp;ss-&gt;cfts,<sp/>node)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a868bd4e83d301006c5beacbd572ba8e3" kindref="member">cgroup_addrm_files</ref>(cgrp,<sp/>cfts,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal">}</highlight></codeline>
<codeline lineno="576" refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" kindref="member">rebind_subsystems</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_root<sp/>*dst_root,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ss_mask){</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tmp_ss_mask;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ssid,<sp/>i,<sp/>ret;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ss_mask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>ssid)))</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(css_next_child(NULL,<sp/><ref refid="test_8c_1ae4afe366b1c79185687211d3a275c101" kindref="member">cgroup_css</ref>(&amp;ss-&gt;root-&gt;cgrp,<sp/>ss))){</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EBUSY;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ss-&gt;root<sp/>!=<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref><sp/>&amp;&amp;<sp/>dst_root<sp/>!=<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EBUSY;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp_ss_mask<sp/>=<sp/>ss_mask;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst_root<sp/>==<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>){</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmp_ss_mask<sp/>&amp;=<sp/>~<ref refid="test_8c_1a71017b03a69b1901dfc31edec56d25cd" kindref="member">cgrp_dfl_root_inhibit_ss_mask</ref>;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="test_8c_1a63940b2ed22e1d221779f807abec7a9b" kindref="member">cgroup_populate_dir</ref>(&amp;dst_root-&gt;cgrp,<sp/>tmp_ss_mask);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst_root<sp/>!=<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="test_8c_1a7bf0f1964f432e905688b1bb4dc5fa0e" kindref="member">cgrp_dfl_root_visible</ref>)<sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_warn(</highlight><highlight class="stringliteral">&quot;failed<sp/>to<sp/>create<sp/>files<sp/>(%d)<sp/>while<sp/>rebinding<sp/>0x%x<sp/>to<sp/>default<sp/>root\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret,<sp/>ss_mask);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_warn(</highlight><highlight class="stringliteral">&quot;you<sp/>may<sp/>retry<sp/>by<sp/>moving<sp/>them<sp/>to<sp/>a<sp/>different<sp/>hierarchy<sp/>and<sp/>unbinding\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ss_mask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>ssid)){</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a67846fcf77a9328302e2cf200db18098" kindref="member">cgroup_clear_dir</ref>(&amp;ss-&gt;root-&gt;cgrp,<sp/>1<sp/>&lt;&lt;<sp/>ssid);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>ssid)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_root<sp/>*src_root;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys_state<sp/>*css;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">css_set<sp/>*cset;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(ss_mask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>ssid)))</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_root<sp/>=<sp/>ss-&gt;root;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>css<sp/>=<sp/><ref refid="test_8c_1ae4afe366b1c79185687211d3a275c101" kindref="member">cgroup_css</ref>(&amp;src_root-&gt;cgrp,<sp/>ss);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WARN_ON(!css<sp/>||<sp/><ref refid="test_8c_1ae4afe366b1c79185687211d3a275c101" kindref="member">cgroup_css</ref>(&amp;dst_root-&gt;cgrp,<sp/>ss));</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RCU_INIT_POINTER(src_root-&gt;cgrp.subsys[ssid],<sp/>NULL);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rcu_assign_pointer(dst_root-&gt;cgrp.subsys[ssid],<sp/>css);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss-&gt;root<sp/>=<sp/>dst_root;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>css-&gt;cgroup<sp/>=<sp/>&amp;dst_root-&gt;cgrp;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>down_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_move_tail(&amp;cset-&gt;e_cset_node[ss-&gt;id],<sp/>&amp;dst_root-&gt;cgrp.e_csets[ss-&gt;id]);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>up_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_root-&gt;subsys_mask<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>ssid);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_root-&gt;cgrp.subtree_control<sp/>&amp;=<sp/>~(1<sp/>&lt;&lt;<sp/>ssid);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a2fcd5031b202af403de1349ab7f6f19c" kindref="member">cgroup_refresh_child_subsys_mask</ref>(&amp;src_root-&gt;cgrp);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_root-&gt;subsys_mask<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>ssid;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dst_root<sp/>!=<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dst_root-&gt;cgrp.subtree_control<sp/>|=<sp/>1<sp/>&lt;&lt;<sp/>ssid;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a2fcd5031b202af403de1349ab7f6f19c" kindref="member">cgroup_refresh_child_subsys_mask</ref>(&amp;dst_root-&gt;cgrp);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ss-&gt;bind)</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss-&gt;bind(css);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>kernfs_activate(dst_root-&gt;cgrp.kn);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">}</highlight></codeline>
<codeline lineno="635" refid="test_8c_1ac5a237871349224e82728f07c4972104" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1ac5a237871349224e82728f07c4972104" kindref="member">cgroup_show_options</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>seq_file<sp/>*seq,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>kernfs_root<sp/>*kf_root){</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_root<sp/>*root<sp/>=<sp/><ref refid="test_8c_1a7175acc19fa151655b9813104cf212ef" kindref="member">cgroup_root_from_kf</ref>(kf_root);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ssid;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>ssid)</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;subsys_mask<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>ssid))</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_printf(seq,<sp/></highlight><highlight class="stringliteral">&quot;,%s&quot;</highlight><highlight class="normal">,<sp/>ss-&gt;name);</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;flags<sp/>&amp;<sp/>CGRP_ROOT_NOPREFIX)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_puts(seq,<sp/></highlight><highlight class="stringliteral">&quot;,noprefix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root-&gt;flags<sp/>&amp;<sp/>CGRP_ROOT_XATTR)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_puts(seq,<sp/></highlight><highlight class="stringliteral">&quot;,xattr&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>spin_lock(&amp;release_agent_path_lock);</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(root-&gt;release_agent_path))</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_printf(seq,<sp/></highlight><highlight class="stringliteral">&quot;,release_agent=%s&quot;</highlight><highlight class="normal">,<sp/>root-&gt;release_agent_path);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>spin_unlock(&amp;release_agent_path_lock);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(test_bit(CGRP_CPUSET_CLONE_CHILDREN,<sp/>&amp;root-&gt;cgrp.flags))</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_puts(seq,<sp/></highlight><highlight class="stringliteral">&quot;,clone_children&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strlen(root-&gt;name))</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seq_printf(seq,<sp/></highlight><highlight class="stringliteral">&quot;,name=%s&quot;</highlight><highlight class="normal">,<sp/>root-&gt;name);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="655"><highlight class="normal">}</highlight></codeline>
<codeline lineno="656" refid="test_8c_1a4ee64583bbd338753f70fe739f3e601d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a4ee64583bbd338753f70fe739f3e601d" kindref="member">parse_cgroupfs_options</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_sb_opts<sp/>*opts){</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*token,<sp/>*o<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_ss<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>one_ss<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask<sp/>=<sp/>-1U;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nr_opts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(opts,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*opts));</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((token<sp/>=<sp/>strsep(&amp;o,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">))<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nr_opts++;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!*token)</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts-&gt;none<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;all&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(one_ss)</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all_ss<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;__DEVEL__sane_behavior&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts-&gt;flags<sp/>|=<sp/>CGRP_ROOT_SANE_BEHAVIOR;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;noprefix&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts-&gt;flags<sp/>|=<sp/>CGRP_ROOT_NOPREFIX;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;clone_children&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts-&gt;cpuset_clone_children<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(token,<sp/></highlight><highlight class="stringliteral">&quot;xattr&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts-&gt;flags<sp/>|=<sp/>CGRP_ROOT_XATTR;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(token,<sp/></highlight><highlight class="stringliteral">&quot;release_agent=&quot;</highlight><highlight class="normal">,<sp/>14))<sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts-&gt;release_agent)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts-&gt;release_agent<sp/>=</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kstrndup(token<sp/>+<sp/>14,<sp/>PATH_MAX<sp/>-<sp/>1,<sp/>GFP_KERNEL);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!opts-&gt;release_agent)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-ENOMEM;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strncmp(token,<sp/></highlight><highlight class="stringliteral">&quot;name=&quot;</highlight><highlight class="normal">,<sp/>5))<sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*name<sp/>=<sp/>token<sp/>+<sp/>5;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strlen(name))</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>strlen(name);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>name[i];</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isalnum(c))</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts-&gt;name)</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts-&gt;name<sp/>=<sp/>kstrndup(name,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MAX_CGROUP_ROOT_NAMELEN<sp/>-<sp/>1,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GFP_KERNEL);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!opts-&gt;name)</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-ENOMEM;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(token,<sp/>ss-&gt;name))</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ss-&gt;disabled)</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_ss)</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts-&gt;subsys_mask<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>i);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one_ss<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>CGROUP_SUBSYS_COUNT)</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-ENOENT;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts-&gt;flags<sp/>&amp;<sp/>CGRP_ROOT_SANE_BEHAVIOR)<sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_warn(</highlight><highlight class="stringliteral">&quot;sane_behavior:<sp/>this<sp/>is<sp/>still<sp/>under<sp/>development<sp/>and<sp/>its<sp/>behaviors<sp/>will<sp/>change,<sp/>proceed<sp/>at<sp/>your<sp/>own<sp/>risk\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nr_opts<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_err(</highlight><highlight class="stringliteral">&quot;sane_behavior:<sp/>no<sp/>other<sp/>mount<sp/>options<sp/>allowed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(all_ss<sp/>||<sp/>(!one_ss<sp/>&amp;&amp;<sp/>!opts-&gt;none<sp/>&amp;&amp;<sp/>!opts-&gt;name))</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>for_each_subsys(ss,<sp/>i)</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!ss-&gt;disabled)</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts-&gt;subsys_mask<sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/>i);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!opts-&gt;subsys_mask<sp/>&amp;&amp;<sp/>!opts-&gt;name)</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((opts-&gt;flags<sp/>&amp;<sp/>CGRP_ROOT_NOPREFIX)<sp/>&amp;&amp;<sp/>(opts-&gt;subsys_mask<sp/>&amp;<sp/>mask))</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts-&gt;subsys_mask<sp/>&amp;&amp;<sp/>opts-&gt;none)</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="758"><highlight class="normal">}</highlight></codeline>
<codeline lineno="759" refid="test_8c_1acd75edad54981c1b66e22efafcf6170d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1acd75edad54981c1b66e22efafcf6170d" kindref="member">cgroup_remount</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>kernfs_root<sp/>*kf_root,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*flags,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data){</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_root<sp/>*root<sp/>=<sp/><ref refid="test_8c_1a7175acc19fa151655b9813104cf212ef" kindref="member">cgroup_root_from_kf</ref>(kf_root);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_sb_opts<sp/>opts;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>added_mask,<sp/>removed_mask;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root<sp/>==<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_err(</highlight><highlight class="stringliteral">&quot;remount<sp/>is<sp/>not<sp/>allowed\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-EINVAL;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_lock(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="test_8c_1a4ee64583bbd338753f70fe739f3e601d" kindref="member">parse_cgroupfs_options</ref>(data,<sp/>&amp;opts);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_unlock;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts.subsys_mask<sp/>!=<sp/>root-&gt;subsys_mask<sp/>||<sp/>opts.release_agent)</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_warn(</highlight><highlight class="stringliteral">&quot;option<sp/>changes<sp/>via<sp/>remount<sp/>are<sp/>deprecated<sp/>(pid=%d<sp/>comm=%s)\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_tgid_nr(current),<sp/>current-&gt;comm);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>added_mask<sp/>=<sp/>opts.subsys_mask<sp/>&amp;<sp/>~root-&gt;subsys_mask;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>removed_mask<sp/>=<sp/>root-&gt;subsys_mask<sp/>&amp;<sp/>~opts.subsys_mask;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((opts.flags<sp/>^<sp/>root-&gt;flags)<sp/>||</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(opts.name<sp/>&amp;&amp;<sp/>strcmp(opts.name,<sp/>root-&gt;name)))<sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pr_err(</highlight><highlight class="stringliteral">&quot;option<sp/>or<sp/>name<sp/>mismatch,<sp/>new:<sp/>0x%x<sp/>\&quot;%s\&quot;,<sp/>old:<sp/>0x%x<sp/>\&quot;%s\&quot;\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>opts.flags,<sp/>opts.name<sp/>?:<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>root-&gt;flags,<sp/>root-&gt;name);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-EINVAL;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_unlock;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list_empty(&amp;root-&gt;cgrp.self.children))<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>-EBUSY;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_unlock;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" kindref="member">rebind_subsystems</ref>(root,<sp/>added_mask);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_unlock;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" kindref="member">rebind_subsystems</ref>(&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>,<sp/>removed_mask);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(opts.release_agent)<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_lock(&amp;release_agent_path_lock);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(root-&gt;release_agent_path,<sp/>opts.release_agent);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_unlock(&amp;release_agent_path_lock);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/>out_unlock:</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>kfree(opts.release_agent);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>kfree(opts.name);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_unlock(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803" refid="test_8c_1af61530e0f44bf8f7ff0127f07634b2dc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1af61530e0f44bf8f7ff0127f07634b2dc" kindref="member">cgroup_enable_task_cg_lists</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">task_struct<sp/>*p,<sp/>*g;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>down_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_task_css_set_links)</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out_unlock;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>use_task_css_set_links<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>read_lock(&amp;tasklist_lock);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>do_each_thread(g,<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>WARN_ON_ONCE(!list_empty(&amp;p-&gt;cg_list)<sp/>||</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task_css_set(p)<sp/>!=<sp/>&amp;init_css_set);</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_lock_irq(&amp;p-&gt;sighand-&gt;siglock);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p-&gt;flags<sp/>&amp;<sp/>PF_EXITING))<sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">css_set<sp/>*cset<sp/>=<sp/>task_css_set(p);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list_add(&amp;p-&gt;cg_list,<sp/>&amp;cset-&gt;tasks);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a77142dfd8a9e4fb0822adc4bf1327ec6" kindref="member">get_css_set</ref>(cset);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spin_unlock_irq(&amp;p-&gt;sighand-&gt;siglock);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>while_each_thread(g,<sp/>p);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>read_unlock(&amp;tasklist_lock);</highlight></codeline>
<codeline lineno="823"><highlight class="normal">out_unlock:</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>up_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826" refid="test_8c_1af111ced8c1d78b1ecfbf87aec4957a23" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1af111ced8c1d78b1ecfbf87aec4957a23" kindref="member">init_cgroup_housekeeping</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup<sp/>*cgrp){</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_subsys<sp/>*ss;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ssid;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;cgrp-&gt;self.sibling);</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;cgrp-&gt;self.children);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;cgrp-&gt;cset_links);</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_LIST_HEAD(&amp;cgrp-&gt;pidlists);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/>mutex_init(&amp;cgrp-&gt;pidlist_mutex);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>cgrp-&gt;self.cgroup<sp/>=<sp/>cgrp;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>cgrp-&gt;self.flags<sp/>|=<sp/>CSS_ONLINE;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>init_waitqueue_head(&amp;cgrp-&gt;offline_waitq);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>INIT_WORK(&amp;cgrp-&gt;release_agent_work,<sp/>cgroup_release_agent);</highlight></codeline>
<codeline lineno="838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="839" refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a112667d68f1ddf434c4aaccd1bc4112c" kindref="member">cgroup_setup_root</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>cgroup_root<sp/>*root,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ss_mask){</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a1c97100246d4db525e74b605e678d713" kindref="member">LIST_HEAD</ref>(tmp_links);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup<sp/>*root_cgrp<sp/>=<sp/>&amp;root-&gt;cgrp;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cftype<sp/>*base_files;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">css_set<sp/>*cset;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>ret;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/>lockdep_assert_held(&amp;cgroup_mutex);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="test_8c_1a3bdf15853437c53e3b50717357229306" kindref="member">cgroup_idr_alloc</ref>(&amp;root-&gt;cgroup_idr,<sp/>root_cgrp,<sp/>1,<sp/>2,<sp/>GFP_NOWAIT);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>root_cgrp-&gt;kn<sp/>=<sp/>root-&gt;kf_root-&gt;kn;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(root<sp/>==<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>)</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss_mask<sp/>=<sp/><ref refid="test_8c_1ad439c08d63718f18d5967b139d8706db" kindref="member">cgroup_dfl_base_files</ref>;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ss_mask<sp/>=<sp/><ref refid="test_8c_1a9f2ecbcace8a5696b7b64f975df1d6eb" kindref="member">cgroup_legacy_base_files</ref>;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="test_8c_1a868bd4e83d301006c5beacbd572ba8e3" kindref="member">cgroup_addrm_files</ref>(root_cgrp,<sp/>ss_mask,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>destroy_root;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="test_8c_1a6a04fbfc8aa87231fca7d86e600d3a45" kindref="member">rebind_subsystems</ref>(root,<sp/>ss_mask);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>destroy_root;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>list_add(&amp;root-&gt;root_list,<sp/>&amp;cgroup_roots);</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1ab9d448c34108c83bb918e79c7ca81719" kindref="member">cgroup_root_count</ref>++;</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/>down_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>hash_for_each(css_set_table,<sp/>i,<sp/>cset,<sp/>hlist)</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a0a202cfc7bd89985c0c032d80f09b6ab" kindref="member">link_css_set</ref>(&amp;tmp_links,<sp/>cset,<sp/>root_cgrp);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/>up_write(&amp;css_set_rwsem);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>BUG_ON(!list_empty(&amp;root_cgrp-&gt;self.children));</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>BUG_ON(atomic_read(&amp;root-&gt;nr_cgrps)<sp/>!=<sp/>1);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/>kernfs_activate(root_cgrp-&gt;kn);</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="869"><highlight class="normal">destroy_root:</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>kernfs_destroy_root(root-&gt;kf_root);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>root-&gt;kf_root<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="872"><highlight class="normal">exit_root_id:</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1a27e5a3a27562d7883f0f0a77300b3c34" kindref="member">cgroup_exit_root_id</ref>(root);</highlight></codeline>
<codeline lineno="874"><highlight class="normal">cancel_ref:</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>percpu_ref_exit(&amp;root_cgrp-&gt;self.refcnt);</highlight></codeline>
<codeline lineno="876"><highlight class="normal">out:</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="test_8c_1af24b26442927c685a414fe0504583ec9" kindref="member">free_cgrp_cset_links</ref>(&amp;tmp_links);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="879"><highlight class="normal">}</highlight></codeline>
<codeline lineno="880" refid="test_8c_1a189c132d50f549d750e498083ddae57b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="test_8c_1a189c132d50f549d750e498083ddae57b" kindref="member">cgroup_kill_sb</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>super_block<sp/>*sb){</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">kernfs_root<sp/>*kf_root<sp/>=<sp/>kernfs_root_from_sb(sb);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">cgroup_root<sp/>*root<sp/>=<sp/><ref refid="test_8c_1a7175acc19fa151655b9813104cf212ef" kindref="member">cgroup_root_from_kf</ref>(kf_root);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!list_empty(&amp;root-&gt;cgrp.self.children)<sp/>||</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root<sp/>==<sp/>&amp;<ref refid="test_8c_1ac071dbafc1632e7788f2ffcdd8683de9" kindref="member">cgrp_dfl_root</ref>)</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="test_8c_1a8586f17f40dfddd4aac8cd3cc6ee7ca8" kindref="member">cgroup_put</ref>(&amp;root-&gt;cgrp);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>percpu_ref_kill(&amp;root-&gt;cgrp.self.refcnt);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>kernfs_kill_sb(sb);</highlight></codeline>
<codeline lineno="889"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="test.c"/>
  </compounddef>
</doxygen>
